<?php

/**
*
* SimpleContactForm
*
* See README.md for usage instructions.
*
* @author Tabea David <info@justonestep.de>
* @version 0.2.1
* @copyright Copyright (c) 2015
* @see https://github.com/justonestep/processwire-simplecontactform
* @see http://www.processwire.com
*/

/**
* Class SimpleContactForm
*/
class SimpleContactForm extends WireData implements Module, ConfigurableModule {

  /**
   * string class name
   */
  const CLASS_NAME = 'SimpleContactForm';

  /**
   * string tag name
   */
  const TAG_NAME = 'scf';

  /**
   * @field array Default config values
   */
  protected static $defaults = array(
    'fullName' => '',
    'emailTo' => '',
    'emailSubject' => 'New Web Contact Form Submission',
    'successMessage' => 'Thank you, your submission has been sent.',
    'errorMessage' => 'Please verify the data you have entered.',
    'emailMessage' => '',
    'emailServer' => 'noreply@server.com',
    'allFields' => 'fullName,email,message',
    'requiredFields' => 'fullName,email,message',
    'emailField' => 'email',
    'saveMessages' => true,
    'antiSpamTimeMin' => '0',
    'antiSpamTimeMax' => '90',
    'antiSpamPerDay' => '3',
    'antiSpamExcludeIps' => '127.0.0.1',
    'antiSpamCountAdditionalInputs' => '5',
    'useTwig' => false,
    'cleanup' => 0
  );

  /**
   * Retrieves module meta data
   * Implementation of the Module interface
   *
   * @return array
   * @see http://processwire.com/apigen/class-Module.html
   */
  public static function getModuleInfo() {
    return array(
      'title' => 'Simple Contact Form',
      'summary' => 'Just a simple contact form (optional twig support). Not more and not less.',
      'version' => 21,
      'href' => 'https://github.com/justonestep/processwire-simplecontactform',
      'singular' => true,
      'autoload' => true,
      'icon' => 'envelope',
    );
  }

  /**
   * Retrieves the list of config input fields
   *
   * Implementation of the ConfigurableModule interface
   *
   * @param array $data The config data
   * @return InputfieldWrapper
   * @see http://processwire.com/apigen/class-ConfigurableModule.html
   */
  public static function getModuleConfigInputfields(array $data) {
    $fields = new InputfieldWrapper();
    $modules = wire('modules');

    // default config values
    $data = array_merge(self::$defaults, $data);

    $settings = array(
      'general' => array(
        'type' => 'InputfieldFieldset',
        'label' => 'General',
        'columnWidth' => 100,
        'collapsed' => Inputfield::collapsedNo
      ),
      'saveMessages' => array(
        'type' => 'InputfieldCheckbox',
        'description' => 'Save Messages',
        'checked' => empty($data['saveMessages']) ? '' : 'checked',
        'columnWidth' => 50
      ),
      'useTwig' => array(
        'type' => 'InputfieldCheckbox',
        'description' => 'Check if you use Twig as template engine',
        'checked' => empty($data['useTwig']) ? '' : 'checked',
        'columnWidth' => 50
      ),
      'email' => array(
        'type' => 'InputfieldFieldset',
        'label' => 'Email',
        'columnWidth' => 100,
        'collapsed' => Inputfield::collapsedNo
      ),
      'emailTo' => array(
        'type' => 'InputfieldText',
        'description' => 'E-mail address(es) of the recipient(s). Scheme: "Example <info@mail.com>, Name <foo@bar.de>, noreply@foo.bar"',
        'size' => 100,
        'placeholder' => 'xxx@xxx.xx',
        'columnWidth' => 50,
        'required' => true
      ),
      'fullName' => array(
        'type' => 'InputfieldText',
        'description' => 'Fallback: Full name of the recipient',
        'size' => 45,
        'placeholder' => 'firstname lastname',
        'columnWidth' => 50
      ),
      'emailSubject' => array(
        'type' => 'InputfieldText',
        'description' => 'E-Mail subject',
        'size' => 45,
        'columnWidth' => 50
      ),
      'emailServer' => array(
        'type' => 'InputfieldText',
        'description' => 'Server address. Scheme: "FromName <noreply@mail.com>"',
        'size' => 45,
        'columnWidth' => 50
      ),
      'fields' => array(
        'type' => 'InputfieldFieldset',
        'label' => 'Fields',
        'columnWidth' => 100,
        'collapsed' => Inputfield::collapsedNo
      ),
      'allFields' => array(
        'type' => 'InputfieldTextarea',
        'description' => 'Comma-separated list of all fields',
        'rows' => 2,
        'columnWidth' => 33
      ),
      'requiredFields' => array(
        'type' => 'InputfieldTextarea',
        'description' => 'Comma-Seperated list of required fields',
        'rows' => 2,
        'columnWidth' => 33
      ),
      'emailField' => array(
        'type' => 'InputfieldText',
        'description' => 'field, which should be validated as an E-mail address',
        'size' => 45,
        'columnWidth' => 34
      ),
      'messages' => array(
        'type' => 'InputfieldFieldset',
        'label' => 'Messages',
        'columnWidth' => 100,
        'collapsed' => Inputfield::collapsedYes
      ),
      'successMessage' => array(
        'type' => 'InputfieldTextarea',
        'description' => 'Success message',
        'rows' => 2,
        'columnWidth' => 50
      ),
      'errorMessage' => array(
        'type' => 'InputfieldTextarea',
        'description' => 'Error message, invalid input.',
        'rows' => 2,
        'columnWidth' => 50
      ),
      'emailMessage' => array(
        'type' => 'InputfieldTextarea',
        'description' => 'Email message (optional - overwrites basic mail template). Use %fieldName% as placeholder, for example %fullName%.',
        'rows' => 5,
        'columnWidth' => 50
      ),
      'spam' => array(
        'type' => 'InputfieldFieldset',
        'label' => 'Spam',
        'columnWidth' => 100,
        'collapsed' => Inputfield::collapsedYes
      ),
      'antiSpamTimeMin' => array(
        'type' => 'InputfieldText',
        'description' => 'It parses the time the user needs to fill out the form. If the time is below a minimum time, the submission is treated as Spam.',
        'size' => 3,
        'columnWidth' => 33
      ),
      'antiSpamTimeMax' => array(
        'type' => 'InputfieldText',
        'description' => 'It parses the time the user needs to fill out the form. If the time is over a maximum time, the submission is treated as Spam.',
        'size' => 3,
        'columnWidth' => 33
      ),
      'antiSpamPerDay' => array(
        'type' => 'InputfieldText',
        'description' => 'How often the form is allowed to be submitted by a single IP address in the last 24 hours.',
        'size' => 3,
        'columnWidth' => 34
      ),
      'antiSpamExcludeIps' => array(
        'type' => 'InputfieldText',
        'description' => 'Comma-Seperated list of IP addresses to be excluded from IP filtering.',
        'size' => 45,
        'columnWidth' => 33
      ),
      'antiSpamCountAdditionalInputs' => array(
        'type' => 'InputfieldText',
        'description' => 'Number of additional inputs. Spam bots often send more than the number of available fields. Default 5 (scf-date + scf-website + submitted + token + submit). AllFields will be added automatically.',
        'size' => 45,
        'columnWidth' => 33
      ),
      'uninstall' => array(
        'type' => 'InputfieldFieldset',
        'label' => 'Uninstall',
        'columnWidth' => 100,
        'collapsed' => Inputfield::collapsedYes,
        'icon' => 'times-circle'
      ),
      'cleanup' => array(
        'type' => 'InputfieldCheckbox',
        'description' => 'If you check the following box all data containing files as well as database content will be permanently erased with no chance for recovery. It\'s recommended to make a backup before uninstalling this module.',
        'checked' => empty($data['cleanup']) ? '' : 'checked',
        'columnWidth' => 100,
        'icon' => 'trash'
      ),
    );

    $help = $modules->get('InputfieldMarkup');
    $helpContent = <<<EOD
<h2>Instructions:</h2>
<ol>
<li>Complete the form below and submit it.</li>
<li>Create a template for your contact form page (if you don't already have one).</li>
<li>In the template add the following line to include the form:
<pre>{{modules.get('SimpleContactForm').render()}} //twig</pre>
<pre>\$modules->get('SimpleContactForm')->render(); //php</pre></li>
</ol>
<p><a  target="_blank" href="https://github.com/justonestep/processwire-simplecontactform">Read more</a></p>
EOD;
    $help->value = $helpContent;
    $fields->append($help);

    // assign fields
    foreach ($settings as $name => $s) {
      $field = $modules->get($s['type']);
      $field->name = $name;

      if ($s['type'] != 'InputfieldFieldset') {
        $field->label = $name;
        $field->value = $data[$name];
      }

      foreach ($s as $key => $val) {
        if ($key != 'type') {
          $field->{$key} = $val;
        }
      }

      if ($s['type'] === 'InputfieldFieldset') {
        $fieldset = $field;
        $fields->append($field);
      } else {
        $fieldset->add($field);
      }
    }

    return $fields;
  }

  /**
   * Initialize the module
   * Initialize a new web contact form
   *
   * Implementation of the Module interface
   *
   * ProcessWire calls this when the module is loaded. For 'autoload' modules, this will be called
   * when ProcessWire's API is ready. As a result, this is a good place to attach hooks.
   *
   * @see http://processwire.com/apigen/class-Module.html
   *
   * @param Template $template Template object holding the form's fields.
   *
   */
  public function init() {
    // check if module is autoload, if not, change it
    if (!$this->modules->isAutoload($this->modules->get(self::CLASS_NAME))) {
      $this->correctFlags();
    }

    // assign API variables to make things a little easier
    $this->templates = wire('templates');
    $this->input = wire('input');
    $this->sanitizer = wire('sanitizer');
    $this->pages = wire('pages');
    $this->modules = wire('modules');

    if (!empty($this->modules->getInstall(self::CLASS_NAME)->data)) {
      // add log file
      $this->log = new FileLog($this->config->paths->logs . strtolower(self::CLASS_NAME) . '-log.txt');

      // convert comma separated values to array
      $this->requiredFields = explode(',', $this->requiredFields);
      $this->allFieldsExtended = explode(',', $this->allFields . ',date,ip,template');
      $this->allFields = explode(',', $this->allFields);
      $this->emailFields = explode(',', $this->emailField);
      $this->templateName = $this->decamelize(self::CLASS_NAME);
      $this->pageName = 'scf-messages';
      $this->repeaterName = 'repeater_scfmessages';
      $this->useTwig = $this->boolval($this->useTwig);
    }
  }

  /**
   * Initialize the module - ready
   *
   * ProcessWire calls this when the module is loaded. For 'autoload' modules, this will be called
   * when ProcessWire's API is ready. As a result, this is a good place to attach hooks.
   *
   * @see http://processwire.com/apigen/class-Module.html
   *
   */
  public function ready() {
    $this->addHookAfter('ProcessPageEdit::execute', $this, 'addSortRepeaterItemsScript');
    $this->addHookBefore('Modules::saveModuleConfigData', $this, 'buildTemplatesOnSaveModuleConfigData');
    $this->addHookAfter('ProcessModule::executeEdit', $this, 'moveUninstall');
  }

  /**
   * add sort repeater items script
   *
   * @param HookEvent $event
   */
  public function addSortRepeaterItemsScript(HookEvent $event) {
    $this->config->scripts->append($this->config->urls->{self::CLASS_NAME} . 'SortRepeaterItems.js');
  }

  /**
   * move uninstall checkbox into fieldset
   * and remove state collapsed
   *
   * @param HookEvent $event
   */
  public function moveUninstall(HookEvent $event) {
    $return = $event->return;

    if (isset($_POST['name'])) $moduleName = $_POST['name'];
      else if(isset($_GET['name'])) $moduleName = $_GET['name'];

    $moduleName = $this->sanitizer->name($moduleName);
    if (
      $moduleName === self::CLASS_NAME &&
      preg_match('/(<li[^>]*wrap_uninstall.*?>).*?(<\/li>)/s', $return, $matches, PREG_OFFSET_CAPTURE)
    ) {
      $move = preg_replace('/collapsed\d\sInputfieldStateCollapsed/', '', $matches[0][0]);
      $return = preg_replace('/(<li[^>]*wrap_uninstall.*?>).*?(<\/li>)/s', '', $return);
      $offset = $matches[0][1] - strlen($return);
      $pos = strrpos($return, '</ul>', $offset);
      $event->return = substr_replace($return, $move, $pos, 0);
    }
  }

  /**
   * check file permissions
   */
  protected function checkFilePermissions() {
    $currentMode = substr(sprintf('%o', fileperms($this->config->paths->templates)), -4);
    if ($currentMode != '0777') {
      chmod($this->config->paths->templates, 0777);
      $this->message('Changed mode for ' . $this->config->paths->templates . ' from ' . $currentMode . ' to 0777 to be able to create the necessary template files.');
    }
  }

  /**
   * Render Form
   */
  private function renderForm() {
    // set CSRF token name and value
    $this->input->tokenName  = $this->session->CSRF->getTokenName();
    $this->input->tokenValue = $this->session->CSRF->getTokenValue();

    $contactPage = new Page();
    $contactPage->set('template', $this->templateName);
    $contactPage->set('parent', $this->page->id);
    return $contactPage->render();
  }

  /**
   * Render
   * available keys:
   *   requiredFields, allFields, emailFields
   *   submitName, templateName, pageName, repeaterName
   *   successMessage, errorMessage, emailMessage, emailAddMessage
   *   emailSubject, emailTo, emailServer, emailAdd, emailAddSubject, emailAddTo
   *   saveMessages, useTwig
   *
   * @param array $options
   *
   */
  public function ___render($options = array()) {
    if ($options) {
      return $this->renderInstance($options);
    } else {
      // validate form and send mail
      if (!empty($this->input->post->submitted)) $this->sendMail();
      return $this->renderForm();
    }
  }

  /**
   * Render further instance
   * available keys:
   *   requiredFields, allFields, emailFields
   *   submitName, templateName, pageName, repeaterName
   *   successMessage, errorMessage, emailMessage, emailAddMessage
   *   emailSubject, emailTo, emailServer, emailAdd, emailAddSubject, emailAddTo
   *   saveMessages, useTwig
   *
   * @param array $options
   */
  private function renderInstance($options) {
    // overwrite module config settings
    foreach ($options as $key => $value) {
      switch ($key) {

        // === fields
        case 'requiredFields':
          $this->requiredFields = explode(',', $value);
          break;
        case 'allFields':
          $this->allFieldsExtended = explode(',', $value . ',date,ip,template');
          $this->allFields = explode(',', $value);
          break;
        case 'emailFields':
          $this->emailFields = explode(',', $value);
          break;

        // === names
        case 'submitName':
          $submitName = $value;
        case 'templateName':
          $this->templateName = $value;
          break;
        case 'pageName':
          $this->pageName = $value;
          break;
        case 'repeaterName':
          $this->repeaterName = $value;
          break;

        // === messages
        case 'successMessage':
          $this->successMessage = $value;
          break;
        case 'errorMessage':
          $this->errorMessage = $value;
          break;
        case 'emailMessage':
          $this->emailMessage = $value;
          break;
        case 'emailAddMessage':
          $this->emailAddMessage = $value;
          break;

        // === email
        case 'emailSubject':
          $this->emailSubject = $value;
          break;
        case 'emailTo':
          $this->emailTo = $value;
          break;
        case 'emailServer':
          $this->emailServer = $value;
          break;
        case 'emailAdd':
          $this->emailAdd = $value;
          break;
        case 'emailAddSubject':
          $this->emailAddSubject = $value;
          break;
        case 'emailAddTo':
          $this->emailAddTo = $value;
          break;

        // === general
        case 'saveMessages':
          $this->saveMessages = $this->boolval($value);
          break;
        case 'useTwig':
          $this->useTwig = $this->boolval($value);
          break;
      }
    }

    // send additional email?
    if (isset($this->emailAdd) && $this->emailAdd) {
      if (!isset($this->emailAddMessage)) $this->emailAddMessage = $this->emailMessage;
      if (!isset($this->emailAddTo)) $this->emailAddTo = $this->emailTo;
      if (!isset($this->emailAddSubject)) $this->emailAddSubject = $this->emailSubject;
    }

    // on form submit
    if (isset($submitName)) {
      if (!empty($this->input->post->submitted) && !empty($this->input->post->{$submitName})) {
        $this->sendMail();
      }
    } elseif (!empty($this->input->post->submitted)) {
        $this->sendMail();
    }

    // execute render
    return $this->renderForm();
  }

  /**
   * validate Fields
   *
   */
  public function ___validateFields() {
    $error = false;
    $log = array();
    $form = array();

    // first check valid mail address
    if (!empty($this->emailFields) && is_array($this->emailFields)) {
      foreach ($this->emailFields as $emailField) {
        $form[$emailField] = $this->sanitizer->email($this->input->post->{$emailField});
        if (empty($form[$emailField])) $log[] = "The E-Mail address is invalid.";
      }
    }

    // second check required fields
    foreach ($this->requiredFields as $requiredField) {
      if (in_array($requiredField, $this->emailFields)) {
        $form[$requiredField] = $this->sanitizer->email($this->input->post->{$requiredField});
      } else {
        $form[$requiredField] = $this->sanitizer->text($this->input->post->{$requiredField});
      }
    }

    // validate required/email fields
    // email fields do not need to be validated here, sanitizer does that already!
    foreach ($form as $field => $value) {
      if (empty($value)) {
        $log[] = "Field $field should not be blank.";
        $error = true;
      }
    }

    if (!empty($log)) $this->log->save('[FAILURE] ' . implode(', ', $log));

    return $error;
  }

  /**
   * get mail message content
   *
   * @param string $text
   * @return string
   */
  private function getMessageContent($text) {
    if (!empty($text)) {
      $date = new DateTime();
      if (preg_match('/\%date\%/', $text)) $text = str_replace('%date%', $date->format('Y-m-d H:i:s'), $text);
      preg_match_all('/\%(.*?)\%/', $text, $matches);

      foreach ($matches[0] as $key => $match) {
        $text = str_replace($match, $this->sanitizer->textarea($this->input->post->{$matches[1][$key]}), $text);
      }
    } else {
      $message = array();
      foreach ($this->allFields as $inputfield) {
        $message[] = $inputfield . ': ' . $this->sanitizer->textarea($this->input->post->{$inputfield});
      }
      $date = new DateTime();
      $message[] = 'Date: ' . $date->format('Y-m-d H:i:s');
      $text = implode("\r\n", $message);
    }

    return  $text;
  }

  /**
   * Send Mail
   *
   */
  public function ___sendMail() {
    $this->antiSpam();
    $error = $this->validateFields();

    // no errors - send mail and save message in database
    if ($error === false) {
      $wireMail = wireMail(); // don't use `new WireMail()` which bypasses WireMailSMTP

      $wireMail->to(explode(',', trim($this->emailTo)));
      $wireMail->toName($this->fullName);
      $wireMail->from($this->emailServer);
      $wireMail->subject($this->emailSubject);
      $wireMail->body(trim($this->getMessageContent($this->emailMessage)));
      $numSent = $wireMail->send();

      // send additional mail
      if (isset($this->emailAdd) && $this->emailAdd) {
        $this->sendAdditionalMail();
      }

      // return success - regardless whether a mail has been sent or not
      $this->input->post->success = $this->successMessage;
      
      // log whether a mail has been sent or not
      if ($numSent) {
        $logmessage = array(
          $_SERVER['HTTP_USER_AGENT'],
          $_SERVER['REMOTE_ADDR'],
          $this->sanitizer->text($this->emailFields)
        );

        $this->log->save('[SUCCESS] ' . implode(', ', $logmessage));
      } else {
        // mail has not been sent
        $this->log->save("[ERROR] Mail has not been sent to {$this->emailTo}");
      }

      // edit page - save message
      if ($this->pages->findOne('template=simple_contact_form_messages, include=all') instanceof Page && $this->saveMessages) {
        $page = $this->pages->findOne('template=simple_contact_form_messages, include=all');
        $newEntry = $page->{$this->repeaterName}->getNew();

        foreach ($this->allFields as $inputfield) {
          $newEntry->{'scf_' . $inputfield} = $this->sanitizer->textarea($this->input->post->{$inputfield});
        }
        $date = new DateTime();
        $newEntry->scf_date = $date->getTimestamp();
        $newEntry->scf_ip = $_SERVER['REMOTE_ADDR'];
        $newEntry->scf_template = $page->template->name;

        $newEntry->save();
        $page->setOutputFormatting(false);
        $page->save();
      }

      // don't send mail twice, deactivate condition
      $this->input->post->submitted = NULL;
    }

    // set error message
    if ($error) $this->input->post->error = $this->errorMessage;
  }

  /**
   * Send Additional Mail
   *
   */
  public function ___sendAdditionalMail() {
    $wireMail = wireMail(); // don't use `new WireMail()` which bypasses WireMailSMTP

    $wireMail->to(explode(',', trim($this->emailAddTo)));
    $wireMail->from($this->emailServer);
    $wireMail->subject($this->emailAddSubject);
    $wireMail->body(trim($this->getMessageContent($this->emailAddMessage)));
    $numSent = $wireMail->send();

    if ($numSent) {
        $logmessage = array(
          $_SERVER['HTTP_USER_AGENT'],
          $_SERVER['REMOTE_ADDR'],
          $this->sanitizer->text($this->emailAddTo)
        );

        $this->log->save('[SUCCESS] ' . implode(', ', $logmessage));
    } else {
        $this->log->save("[ERROR] Additional mail could not be sent to {$this->emailAddTo}");
    }
  }

  /**
   *  spam protection
   *
   */
  protected function antiSpam() {
    $spam = false;
    $bptUserAgents = '#w3c|google|slurp|msn|yahoo|y!j|altavista|ask|spider|search|bot|crawl|usw#i';

    $dateDiff = 0;
    if (!empty($this->input->post->{'scf-date'})) {
      $dateDiff = time() - (int)$this->input->post->{'scf-date'};
    }

    // first validate CSRF token
    try {
      $this->session->CSRF->validate();
    } catch (WireCSRFException $e) {
      $spam = true;
      $this->log->save('[FAILURE] CSRF Token validation failed.');
    }

    $countFields = count($this->allFields) + (int)$this->antiSpamCountAdditionalInputs;
    $countInputs = count($this->input->post);
    if ($this->input->post->error || $this->input->post->success) $countInputs--;

    if ($spam === false) {
      // always test:
      if (!empty($this->input->post->{'scf-website'})) {
        // evaluate honeypot
        $spam = true;
        $this->log->save('[FAILURE] Honeypot field was filled.');
      } elseif ($countFields !== $countInputs) {
        // check number of fields
        $spam = true;
        $this->log->save('[FAILURE] Number of fields does not match.');
      } elseif (preg_match($bptUserAgents, $_SERVER['HTTP_USER_AGENT'])) {
        // check HTTP_USER_AGENT
        $spam = true;
        $this->log->save('[FAILURE] User Agent is not allowed.');
      } elseif ($_SERVER['HTTP_REFERER'] === '' && $_SERVER['HTTP_USER_AGENT'] === '') {
        // check HTTP_REFERER und HTTP_USER_AGENT
        $spam = true;
        $this->log->save('[FAILURE] User Agent and HTTP Referer are empty.');
      } elseif ($dateDiff <= $this->antiSpamTimeMin || $dateDiff >= $this->antiSpamTimeMax) {
        // check date difference
        $spam = true;
        $this->log->save('[FAILURE] Date difference is out of range.');
      }

      // additional checks only if save messages feature is turned on
      if ($spam === false && $this->saveMessages) {
        // get all mail addresses marked as spam
        $receivedMessages = $this->pages->findOne('template=simple_contact_form_messages, include=all')->{$this->repeaterName};
        $currentIp = $_SERVER['REMOTE_ADDR'];
        $excludeIps = explode(',', $this->antiSpamExcludeIps);

        // get ips and mail addresses marked as spam
        $spam = array('ips' => array(), 'mails' => array());
        $spamMailsMsgs = $receivedMessages->find('scf_spamMail!=');
        $spamIpsMsgs = $receivedMessages->find('scf_spamIp!=');
        foreach ($spamMailsMsgs as $spamMsg) { $spam['mails'][] = $spamMsg->scf_email; }
        foreach ($spamIpsMsgs as $spamMsg) { $spam['ips'][] = $spamMsg->scf_ip; }

        if (!in_array($currentIp, $excludeIps) && $this->saveMessages) {
          // control how often the form is allowed to be submitted by a single IP address
          $dateSub = new DateTime();
          $dateSub->sub(new DateInterval('P1D'));
          $totalLast24h = $receivedMessages->find('scf_ip!="", scf_date>=' . $dateSub->getTimestamp() . ', scf_ip=' . $currentIp)->count();

          if ($totalLast24h >= $this->antiSpamPerDay) {
            $spam = true;
            $this->log->save('[FAILURE] This IP address submitted this form too often.');
          }
        } elseif (in_array($currentIp, $spam['ips'])) {
          // check whether ip was already marked as spam
          $spam = true;
          $this->log->save("[FAILURE] This IP address $currentIp was already marked as spam.");
        } else {
          foreach ($this->emailFields as $emailField) {
            if (in_array($this->input->post->{$emailField}, $spam['mails'])) {
              // check whether mail address was already marked as spam
              $spam = true;
              $this->log->save('[FAILURE] This mail address ' . $this->input->post->{$emailField} . ' was already marked as spam.');
            }
          }
        }
      }
    }

    if ($spam === true) {
      $this->session->redirect($this->pages->get('/')->url);
    }
  }

  /**
   * Build the contact form and add fields to it
   *
   */
  protected function buildForm() {
    // create the contact form
    $form = $this->modules->get("InputfieldForm");
    $form->method = 'post';
    $form->action = './';
    $form->class = 'js-simple_contact_form';

    // add the fields as simple input fields to the form
    foreach ($this->allFields as $inputfield) {
      $singleField = $this->modules->get('InputfieldText');
      $singleField->name = $inputfield;
      $singleField->placeholder = $inputfield;

      if ($this->useTwig) {
        $singleField->initValue = '{{input.' . $inputfield . '}}';
      } else {
        $singleField->initValue = '<?= $input->' . $inputfield . '; ?>';
      }

      if (in_array($inputfield, $this->requiredFields)) $singleField->required = true;
      $form->add($singleField);
    }

    // add honeypot (spam protection)
    $honeyField = $this->modules->get('InputfieldText');
    $honeyField->name = 'scf-website';
    $honeyField->initValue = '';
    $form->add($honeyField);

    $scfDate = ($this->useTwig) ? '{{\'now\'|date(\'U\')}}' : '<?= time(); ?>';
    foreach (array('submitted' => '1', 'scf-date' => $scfDate) as $name => $val) {
      // add hidden field to track wheater the form was submitted and to save current timestamp
      $hiddenField = $this->modules->get('InputfieldHidden');
      $hiddenField->name = $name;
      $hiddenField->initValue = $val;
      $form->add($hiddenField);
    }

    // add a submit button
    $submit = $this->modules->get("InputfieldSubmit");
    $submit->name = "submit";
    $submit->value = 'Submit';
    $form->add($submit);

    // render form and substitute CSRF Token
    $out = $form->render();
    $tokenValue = $this->useTwig ? '{{input.tokenValue}}' : '<?= $input->tokenValue; ?>';
    $tokenName = $this->useTwig ? '{{input.tokenName}}' : '<?= $input->tokenName; ?>';
    // get token name and count string length after TOKEN
    // look behind does not allow varianble length
    $token = preg_match('/(?<=TOKEN)[\dX]*/', $out, $matches, PREG_OFFSET_CAPTURE);
    $tokenLength = (strlen($matches[0][0]));
    $out = preg_replace('/((?<=TOKEN[\dX]{' . $tokenLength . '}[\'"]\s(value=)[\'"])[.\/\dA-Za-z]*)/', $tokenValue, $out);
    $out = preg_replace('/(TOKEN[\dX]{' . $tokenLength . '})/', $tokenName,  $out);

    return $out;
  }

  /**
   * create a page for holding the form fields
   *
   */
  protected function createContactPage() {
    $tName = $this->decamelize(self::CLASS_NAME);

    // create a new template for contactPage - database
    if (!$this->templates->get($tName) instanceof Template) {
      // new fieldgroup
      $fg = new Fieldgroup();
      $fg->name = $tName;
      $fg->add($this->fields->get('title')); // needed title field
      $fg->save();

      $contactTemplate = new Template();
      $contactTemplate->name = $tName;
      $contactTemplate->fieldgroup = $fg; // add the fieldgroup
      $contactTemplate->noChildren = 1;
      $contactTemplate->slashUrls = 1;
      $contactTemplate->noPrependTemplateFile = 1;
      $contactTemplate->noAppendTemplateFile = 1;
      $contactTemplate->tags = self::TAG_NAME;
      $contactTemplate->save();
    }

    $ext = $this->useTwig ? '.twig' : '.php';
    $tPath = $this->config->paths->templates . $tName . $ext;
    if (!file_exists($tPath)) {
      // add form
      $form = $this->buildForm();
      $content = $this->getFormTemplateContent($form);

      // create template file
      $template = fopen($tPath, 'w');
      chmod($tPath, 0766);
      fwrite($template, html_entity_decode(implode("\n", $content), ENT_QUOTES));
      fclose($template);

      if (!file_exists($tPath)) {
        throw new WireException('The template file could not be created. Check File Mode for `site/templates` (has to be 0777).');
      }
    } else {
      $contactTemplate = $this->templates->get($tName);
    }
  }


  private function getFormTemplateContent($form) {
    // combine template parts
    if ($this->useTwig) {
      $content = array(
        '<div class="">',
        '{% if input.success %}',
        '<p class="success scf-state">{{input.success}}</p>',
        '{% else %}',
        $form,
        "\n\n" . '{% if input.error %}',
        '<p class="error scf-state">{{input.error}}</p>',
        '{% endif %}',
        '{% endif %}',
        '</div>'
      );
    } else {
      $content = array(
        '<div class="">',
        '<?php if ($input->success): ?>',
        '<p class=\'success scf-state\'><?= $input->success; ?></p>',
        '<?php else: ?>',
        $form,
        "\n\n",
        '<?php if ($input->error): ?>',
        '<p class=\'error scf-state\'><?= $input->error; ?></p>',
        '<?php endif; ?>',
        '<?php endif; ?>',
        '</div>'
      );
    }

    return $content;
  }


  private function getTableTemplateContent() {
    $table = array(
      'head' => array(),
      'content' => array()
    );

    foreach ($this->allFieldsExtended as $inputfield) {
      if ($this->useTwig) {
        $table['head'][] = '<th>{{fields.get("scf_' . $inputfield . '").label}}</th>';

        if (in_array($inputfield, $this->emailFields)) {
          $table['content'][] = '<td><a href="mailto:{{message.scf_' . $inputfield . '}}">{{message.scf_' . $inputfield . '}}</a></td>';
        } elseif ($inputfield === 'date') {
          $table['content'][] = '<td>{{message.scf_' . $inputfield . '|date("d.m.Y H:i")}}</td>';
        } else {
          $table['content'][] = '<td>{{message.scf_' . $inputfield . '}}</td>';
        }
      } else {
        $table['head'][] = '<th><?= $fields->get("scf_' . $inputfield . '")->label; ?></th>';

        $input = "scf_{$inputfield}";
        if (in_array($inputfield, $this->emailFields)) {
          $table['content'][] = '<td><a href=\'mailto:<?= $message->' . $input . '; ?>\'><?= $message->' . $input . '; ?></a></td>';
        } elseif ($inputfield === 'date') {
          $table['content'][] = '<td><?= date("d.m.Y H:i", $message->' . $input . '); ?></td>';
        } else {
          $table['content'][] = '<td><?= $message->' . $input . '; ?></td>';
        }
      }
    }

    return $table;
  }

  private function getMessagesTemplateContent($table, $templateName, $repeaterName) {
    // combine template parts
    if ($this->useTwig) {
      $content = array(
        '{% if user.hasRole("superuser") %}',
        '{% set currentPage = pages.findOne("template=' . $templateName . '") %}',
        '<h1>{{currentPage.title}}</h1>',
        '<table>',
        '<thead>',
        '<tr>',
        implode("\n", $table['head']),
        '</tr>',
        '</thead>',
        '<tbody>',
        '{% for message in currentPage.' . $repeaterName . '.find("scf_spamIp=,scf_spamMail=").sort("-scf_date") %}',
        '<tr>',
        implode("\n", $table['content']),
        '</tr>',
        '{% endfor %}',
        '</tbody>',
        '</table>',
        '{% else %}',
        '{{session.redirect(pages.get("/").url)}}',
        '{% endif %}'
      );

    } else {
      $content = array(
        '<?php',
        'if ($user->hasRole("superuser")):',
        '$currentPage = $this->pages->findOne("template=\'' . $templateName . '\'"); ?>',
        '<h1><?= $currentPage->title; ?></h1>',
        '<table>',
        '<thead>',
        '<tr>',
        implode("\n", $table['head']),
        '</tr>',
        '</thead>',
        '<tbody>',
        '<?php foreach ($currentPage->' . $repeaterName . '->find("scf_spamIp=,scf_spamMail=")->sort(\'-scf-date\') as $message): ?>',
        '<tr>',
        implode("\n", $table['content']),
        '</tr>',
        '<?php endforeach; ?>',
        '</tbody>',
        '</table>',
        '<?php else: ?>',
        '<?php $session->redirect($pages->get("/")->url); ?>',
        '<?php endif; ?>'
      );
    }

    return $content;
  }

  /**
   * create a page for holding the received messages
   *
   * @param string $templateName
   */
  protected function createReceivedMessagesPage($templateName) {
    // create repeater field
    $repeaterField = $this->createRepeater();

    // create fieldgroup
    $fg = new Fieldgroup();
    $fg->name = $templateName;
    $fg->add($this->fields->get('title')); // needed title field
    $fg->add($repeaterField); // needed title field
    $fg->save();

    // create new template
    $t = new Template();
    $t->name = $templateName;
    $t->fieldgroup = $fg; // add the fieldgroup
    $t->noChildren = 1;
    $t->noPrependTemplateFile = 1;
    $t->noAppendTemplateFile = 1;
    $t->tags = self::TAG_NAME;
    $t->save();

    // create page
    $p = new Page();
    $p->template = $t;
    $p->parent = $this->pages->get('/');
    $p->name = $this->pageName;
    $p->title = $this->pageName;
    $p->addStatus(Page::statusHidden);
    $p->save();
  }

  /**
   * create a page for holding the received messages
   *
   * @param string $templateName
   */
  private function createReceivedMessagesTemplate($templateName) {
    $ext = $this->useTwig ? '.twig' : '.php';
    $tPath = $this->config->paths->templates . $templateName . $ext;
    if (!file_exists($tPath)) {
      $table = $this->getTableTemplateContent();
      $content = $this->getMessagesTemplateContent($table, $templateName, $this->repeaterName);

      // create template file
      $template = fopen($tPath, 'w');
      chmod($tPath, 0766);
      fwrite($template, html_entity_decode(implode("\n", $content)));
      fclose($template);

      if (!file_exists($tPath)) {
        throw new WireException('The template file could not be created. Check File Mode for `site/templates` (has to be 0777).');
      }
    }
  }

  /**
   * Creates a repeater field with associated fieldgroup, template, and page
   *
   * @return Returns the new Repeater field
   *
   */
  public function createRepeater() {
    // create fields for repeater
    foreach ($this->allFieldsExtended as $name) {
      $f = new Field();
      $f->type = $this->modules->get('FieldtypeText');
      $f->name = 'scf_' . $name;
      $f->label = 'SCF - ' . ucfirst($name);
      $f->tags = self::TAG_NAME;
      $f->columnWidth = '25';
      $f->save();
    }

    foreach (array('spamIp', 'spamMail') as $name) {
      preg_match('/[A-Z].*$/', $name, $matches, PREG_OFFSET_CAPTURE );

      $f = new Field();
      $f->type = $this->modules->get('FieldtypeCheckbox');
      $f->name = 'scf_' . $name;
      $f->label = 'Add ' . $matches[0][0] . ' to spam list';
      $f->tags = self::TAG_NAME;
      $f->columnWidth = '100';
      $f->save();
    }

    $allFields = $this->allFieldsExtended;
    $allFields[] = 'spamIp';
    $allFields[] = 'spamMail';

    // create field
    $repeaterField = new Field();
    $repeaterField->type = $this->modules->get("FieldtypeRepeater");
    $repeaterField->name = $this->repeaterName;
    $repeaterField->label = 'SCF - ' . $this->repeaterName;
    $repeaterField->tags = self::TAG_NAME;
    $repeaterField->repeaterReadyItems = 3;

    // create fieldgroup
    $repeaterFg = new Fieldgroup();
    $repeaterFg->name = 'repeater_' . $this->repeaterName;

    // add fields to fieldgroup
    foreach ($allFields as $field) {
      $repeaterFg->append($this->fields->get('scf_' . $field));
    }
    $repeaterFg->save();

    // create template
    $repeaterT = new Template();
    $repeaterT->name = 'repeater_' . $this->repeaterName;
    $repeaterT->noChildren = 1;
    $repeaterT->noParents = 1;
    $repeaterT->noGlobal = 1;
    $repeaterT->slashUrls = 1;
    $repeaterT->flags = 8;
    $repeaterT->tags = self::TAG_NAME;
    $repeaterT->fieldgroup = $repeaterFg;

    $repeaterT->save();

    // setup page for the repeater
    $repeaterPage = 'for-field-' . $repeaterField->id;
    $repeaterField->parent_id = $this->pages->get('name=' . $repeaterPage)->id;
    $repeaterField->template_id = $repeaterT->id;
    $repeaterField->repeaterReadyItems = 3;

    // now, add the fields directly to the repeater field
    foreach ($allFields as $field) {
      $repeaterField->repeaterFields = $this->fields->get('scf_' . $field);
    }

    $repeaterField->save();

    return $repeaterField;
  }

  /**
   * Hook
   *
   * @param HookEvent $event
   */
  public function buildTemplatesOnSaveModuleConfigData(HookEvent $event) {
    $this->checkFilePermissions();

    if ($event->arguments[0] === self::CLASS_NAME) {
      $configDataUntilNow = $this->modules->getModuleConfigData(self::CLASS_NAME);
      $configDataUpdated = $event->arguments[1];

      $this->useTwig = $this->boolval($configDataUpdated['useTwig']);
      $ext = $this->useTwig ? '.twig' : '.php';
      $tPath = $this->config->paths->templates . $this->decamelize(self::CLASS_NAME) . $ext;

      // check whether to save the received messages
      if ($configDataUpdated['saveMessages']) {
        $tName = $this->decamelize(self::CLASS_NAME . 'Messages');

        if (!$this->templates->get($tName) instanceof Template) {
          $this->createReceivedMessagesPage($tName);
        } else {
          $this->addTemplateField();
        }

        $this->createReceivedMessagesTemplate($tName);
      }

      // check for existing template
      if (!file_exists($tPath)) {
        // create new template
        $this->createContactPage();
      } else {
        // update existing template - remove fields
        $configDataDiffRemove = array_diff($configDataUntilNow, $configDataUpdated);
        if (!empty($configDataDiffRemove)) {
          $this->removeFieldsFromExistingTemplate($configDataUntilNow, $configDataUpdated, $configDataDiffRemove);
        }

        // update existing template - add fields
        $configDataDiffAdd = array_diff($configDataUpdated, $configDataUntilNow);
        if (!empty($configDataDiffAdd)) {
          $this->addFieldsToExistingTemplate($configDataUntilNow, $configDataUpdated, $configDataDiffAdd);
        }
      }
    }
  }

  /*
   * remove fields from an existing contact form template
   *
   * @param array $configDataUntilNow
   * @param array $configDataUpdated
   * @param array $configDataDiff
   */
  protected function removeFieldsFromExistingTemplate($configDataUntilNow, $configDataUpdated, $configDataDiff) {
    // check messages - success and error
    if (array_key_exists('allFields', $configDataDiff)) {
      // check for new fields
      $fieldsUpdated = explode(',', preg_replace('/\s+/', '', $configDataUpdated['allFields']));
      $fieldsRemoved = array();
      foreach (explode(',', preg_replace('/\s+/', '', $configDataDiff['allFields'])) as $field) {
        if (!array_key_exists($field, array_flip($fieldsUpdated))) {
          $fieldsRemoved[] = $field;
        }
      }

      if (!empty($fieldsRemoved)) {
        $repeaterFg = $this->fieldgroups->get('repeater_' . $this->repeaterName);
        $fileExtension =  ($configDataUpdated['useTwig']) ? '.twig' : '.php';
        $t = $this->config->paths->templates . $this->decamelize(self::CLASS_NAME) . $fileExtension;
        $tContent = file_get_contents($t);

        // append new fields and header in save messages template
        // first check if save message setting is on
        if (!empty($configDataUpdated['saveMessages'])) {
          $tMessages = $this->config->paths->templates . $this->decamelize(self::CLASS_NAME . 'Messages') . $fileExtension;
          $tMContent = file_get_contents($tMessages);
        }

        // yeah, there are some fields to remove
        foreach ($fieldsRemoved as $key => $name) {
          // REAL FIELD INCLUDING TABLE
          // check for existing table
          if (!is_null($this->fields->get('scf_' . $name))) {
            if (!is_null($repeaterFg->getField('scf_' . $name))) {
              $repeaterFg->remove($this->fields->get('scf_' . $name));
            }
          }

          // HTML OUTPUT
          // remove just label and input, you have to remove additional markup manually
          $split = preg_split('/(<label).*(for=[\'"]).*(' . $name . '[\'"])(>).*(<\/label>)/', $tContent);
          if (count($split) > 1) $tContent = implode('', $split);
          $split = preg_split('/(<input).*(name=[\'"]' . $name . '[\'"]).*(\/>)/', $tContent);
          $tContent = implode('', $split);

          if (!empty($configDataUpdated['saveMessages'])) {
            // remove table header and content for specific field
            $tMContent = preg_replace('/(<)(th|td)(>).*(scf_' . $name . ').*(<\/)(th|td)(>)/', '', $tMContent);
          }
        }

        $repeaterFg->save();

        $template = fopen($t, 'w');
        chmod($t, 0766);
        fwrite($template, html_entity_decode($tContent));
        fclose($template);

        $templateM = fopen($tMessages, 'w');
        chmod($tMessages, 0766);
        fwrite($templateM, html_entity_decode($tMContent));
        fclose($templateM);
      }
    }
  }

  /*
   * add fields to an existing contact form template
   *
   * @param array $configDataUntilNow
   * @param array $configDataUpdated
   * @param array $configDataDiff
   */
  protected function addFieldsToExistingTemplate($configDataUntilNow, $configDataUpdated, $configDataDiff) {
    // check messages - success and error
    if (array_key_exists('allFields', $configDataDiff)) {
      // check for new fields
      $fieldsUntilNow = explode(',', preg_replace('/\s+/', '', $configDataUntilNow['allFields']));
      $fieldsNew = array();
      foreach (explode(',', preg_replace('/\s+/', '', $configDataDiff['allFields'])) as $field) {
        if (!array_key_exists($field, array_flip($fieldsUntilNow))) {
          $fieldsNew[] = $field;
        }
      }

      if (!empty($fieldsNew)) {
        $repeaterFg = $this->fieldgroups->get('repeater_' . $this->repeaterName);
        $inputfields = new InputfieldWrapper();
        $saveMessages = array('head' => array(), 'content' => array());

        // yeah, there are some new fields to add
        foreach ($fieldsNew as $key => $name) {
          // REAL FIELD INCLUDING TABLE
          // check for existing table
          if (is_null($this->fields->get('scf_' . $name))) {
            $f = new Field();
            $f->type = $this->modules->get('FieldtypeText');
            $f->name = 'scf_' . $name;
            $f->label = 'SCF - ' . ucfirst($name);
            $f->tags = self::TAG_NAME;
            $f->columnWidth = '25';
            $f->save();

            if (is_null($repeaterFg->getField('scf_' . $name))) {
              if (is_null($this->fields->get('scf_spamIp'))) {
                $repeaterFg->append($f);
              } else {
                $repeaterFg->insertBefore($f, $this->fields->get('scf_spamIp'));
              }
            }
          }

          // HTML OUTPUT
          $singleField = $this->modules->get('InputfieldText');
          $singleField->name = $name;
          $singleField->placeholder = $name;

          if ($configDataUpdated['useTwig']) {
            $singleField->initValue = '{{input.' . $name . '}}';
            $fileExtension = '.twig';
            $saveMessages['head'][] = '<th>{{fields.get("scf_' . $inputfield . '").label}}</th>';
            $saveMessages['content'][] = '<td>{{message.scf_' . $inputfield . '}}</td>';
          } else {
            $singleField->initValue = '<?= $input->' . $name . '; ?>';
            $fileExtension = '.php';
            $saveMessages['head'][] = '<th><?= $fields->get("scf_' . $name . '")->label; ?></th>';
            $saveMessages['content'][] = '<td><?= $message->scf_' . $name . '; ?></td>';
          }

          $requiredFields = explode(',', preg_replace('/\s+/', '', $configDataUpdated['requiredFields']));
          if (in_array($name, $requiredFields)) $singleField->required = true;
          $inputfields->add($singleField);
        }

        $repeaterFg->save();

        // prepend new fields in contact template
        $t = $this->config->paths->templates . $this->decamelize(self::CLASS_NAME) . $fileExtension;
        $tContent = file_get_contents($t);
        $split = preg_split('/(<form).*(>)/', $tContent, NULL, PREG_SPLIT_OFFSET_CAPTURE);
        if (is_array($split) && is_array(end($split)) && array_key_exists(1, end($split))) {
          $endSplit = end($split);
          $newContent = substr_replace($tContent, $inputfields->render(), $endSplit[1], 0);

          $template = fopen($t, 'w');
          chmod($t, 0766);
          fwrite($template, html_entity_decode($newContent));
          fclose($template);
        }

        // append new fields and header in save messages template
        // first check if save message setting is on
        if (!empty($configDataUpdated['saveMessages'])) {
          $tMessages = $this->config->paths->templates . $this->decamelize(self::CLASS_NAME . 'Messages') . $fileExtension;
          $tMContent = file_get_contents($tMessages);
          $splitM = preg_split('/(<\/tr>)/', $tMContent, NULL, PREG_SPLIT_OFFSET_CAPTURE);

          if (!empty($splitM)) {
            // insert first content to maintain (int)start
            $newMContent = substr_replace($tMContent, implode("\n", $saveMessages['content']) . "\n", $splitM[2][1] - 5, 0);
            $newMContent = substr_replace($newMContent, implode("\n", $saveMessages['head']) . "\n", $splitM[1][1] - 5, 0);
          }

          $templateM = fopen($tMessages, 'w');
          chmod($tMessages, 0766);
          fwrite($templateM, html_entity_decode($newMContent));
          fclose($templateM);
        }
      }
    }
  }

  /*
   * decamelize - CamelCase to lower_case_and_underscore
   *
   * @param string $word
   */
  public function decamelize($word) {
    return strtolower(preg_replace('/(?!^)[[:upper:]]+/', '_$0', $word));
  }

  /**
   * get the boolean value of a variable
   *
   * @param $val
   */
  public function boolval($val) {
    if (!function_exists('boolval')) {
      // (PHP 5 < 5.5.0)
      $bool = (bool) $val;
    } else {
      // (PHP 5 >= 5.5.0)
      $bool = boolval($val);
    }

    return $bool;
  }

  /*
   * add autoload flag
   */
  protected function correctFlags() {
    // mark module as autoload
    $db = wire('database');
    $table = $db->escapeTable('modules');

    try {
      $query = $db->prepare("UPDATE `$table` SET flags=:flags WHERE class=:class");
      $query->bindValue(":flags", 3);
      $query->bindValue(":class", self::CLASS_NAME);
      $query->execute();
    } catch(Exception $e) {
      $this->errors($e->getMessage(), Notice::log);
    }
  }

  /*
   * add template field - save template
   */
  protected function addTemplateField() {
    $name = 'template';
    if (is_null($this->fields->get("scf_$name"))) {
      $f = new Field();
      $f->type = $this->modules->get('FieldtypeText');
      $f->name = "scf_$name";
      $f->label = 'SCF - ' . ucfirst($name);
      $f->tags = self::TAG_NAME;
      $f->columnWidth = '25';
      $f->save();

      $repeaterField = $this->fields->get($this->repeaterName);

      $repeaterFg = $this->fieldgroups->get('repeater_' . $this->repeaterName);
      $repeaterFg->append($this->fields->get('scf_' . $name));
      $repeaterFg->save();
    }
  }

  /**
   * called only when the module is uninstalled
   * this should return the site to the same state it was in before the module was installed
   *
   * @access public
   *
   */
  public function ___uninstall() {
    // first check whether to clean up everything
    if ($this->boolval($this->input->post->cleanup)) {
      // delete pages
      $page = $this->pages->get('template=' . $this->decamelize(self::CLASS_NAME . 'Messages'));
      if ($page->id) $page->delete();

      // delete templates
      $templates = $this->templates->find('tags=' . self::TAG_NAME . '|name=repeater_scfmessages');
      foreach ($templates as $template) {
        if ($template->id) {
          if ($this->config->templateExtension === 'php') {
            $fileWithOtherExt = preg_replace('/php$/', 'twig', $template->filename);
          } else {
            $fileWithOtherExt = preg_replace('/twig$/', 'php', $template->filename);
          }

          if (file_exists($template->filename)) unlink($template->filename);
          if (file_exists($fileWithOtherExt)) unlink($fileWithOtherExt);

          $template->flags = Template::flagSystemOverride;
          $template->flags = 0; // all flags now removed, can be deleted
          $this->templates->delete($template);

          // delete fieldgroups
          $fg = $this->fieldgroups->get($template->name);
          if ($fg->id) $this->fieldgroups->delete($fg);
        }
      }

      // delete fields
      foreach ($this->fields->find('name^=scf_|repeater_scfmessages') as $field) {
        if ($field->id) $this->fields->delete($field);
      }
    }
  }

  /**
   * install routine
   */
  public function ___install() {
    $this->checkFilePermissions();
    wire('modules')->saveModuleConfigData($this, self::$defaults);
  }

}
